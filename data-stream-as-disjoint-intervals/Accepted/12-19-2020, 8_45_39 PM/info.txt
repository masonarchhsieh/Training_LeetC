{"id":432260522,"lang":"cpp","lang_name":"C++","time":"2 years, 9 months","timestamp":1608381939,"status":10,"status_display":"Accepted","runtime":"512 ms","url":"/submissions/detail/432260522/","is_pending":"Not Pending","title":"Data Stream as Disjoint Intervals","memory":"33.7 MB","code":"class SummaryRanges {\npublic:\n    /** Initialize your data structure here. */\n    vector<int> nums;\n    SummaryRanges() {\n    }\n    \n    void addNum(int val) {\n        vector<int>::iterator it;\n        it = find (nums.begin(), nums.end(), val);\n        if (it != nums.end())\n            return;\n        \n        nums.push_back(val);\n        sort(nums.begin(), nums.end());\n    }\n    \n    vector<vector<int>> getIntervals() {\n        vector<vector<int>> res;\n        \n        for (int i=0; i<nums.size(); i++) {\n            int j = i;\n            \n            while (j+1 < nums.size() && (long) (long) nums[j+1] - (long) nums[j] == 1)\n                j++;\n            \n            if (i==j)\n                res.push_back(vector<int>{nums[i], nums[i]});\n            else\n                res.push_back(vector<int>{nums[i], nums[j]});\n            i = j;\n        }\n        \n        \n        return res;\n    }\n};\n\n/**\n * Your SummaryRanges object will be instantiated and called as such:\n * SummaryRanges* obj = new SummaryRanges();\n * obj->addNum(val);\n * vector<vector<int>> param_2 = obj->getIntervals();\n */","compare_result":"111111111","title_slug":"data-stream-as-disjoint-intervals","has_notes":false,"flag_type":1}