{"id":888198783,"lang":"cpp","lang_name":"C++","time":"8Â months","timestamp":1675095392,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/888198783/","is_pending":"Not Pending","title":"Binary Tree Inorder Traversal","memory":"10.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        if (!root)\n            return vector<int>{};\n        \n        vector<int> list;\n        vector<int> list_left = inorderTraversal(root->left);\n        vector <int> list_right = inorderTraversal(root->right);\n        \n        list.insert(list.end(), list_left.begin(), list_left.end());\n        list.push_back(root->val);\n        list.insert(list.end(), list_right.begin(), list_right.end());\n        \n        return list;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-inorder-traversal","has_notes":false,"flag_type":1}