{"id":1029253766,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1692768969,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1029253766/","is_pending":"Not Pending","title":"Path Crossing","memory":"6.9 MB","code":"// Hash function \nstruct hashFunction\n{\n  size_t operator()(const pair<bool, \n                    bool> &x) const\n  {\n    return x.first ^ x.second;\n  }\n};\nclass Solution {\npublic:\n    bool isPathCrossing(string path) {\n        unordered_set<pair<int, int>, hashFunction> s;\n        int posX = 0, posY = 0;\n        s.insert(make_pair(posX, posY));\n\n        for (auto i = 0; i < path.length(); i++) {\n            switch (path[i]) {\n                case 'N':\n                    posY++;\n                break;\n                case 'S':\n                    posY--;\n                break;\n                case 'E':\n                    posX++;\n                break;\n                case 'W':\n                    posX--;\n                break;\n                default:\n                break;\n            }\n            if (s.find(make_pair(posX, posY)) != s.end())\n                return true;\n            s.insert(make_pair(posX, posY));\n        }\n        return false;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-crossing","has_notes":false,"flag_type":1}