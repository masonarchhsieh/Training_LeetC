{"id":995741824,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1689498002,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/995741824/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"8.2 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        ListNode *slow, *fast;\n        if (!head || !head->next)\n            return false;\n        slow = head;\n        fast = head->next;\n\n        while (fast) {\n            if (slow == fast)\n                return true;\n            slow = slow->next;\n            if (!fast->next)\n                return false;\n            fast = fast->next->next;\n        }\n\n        return false;\n    }\n};","compare_result":"11111111111111111111111","title_slug":"linked-list-cycle","has_notes":false,"flag_type":1}