{"id":792156029,"lang":"cpp","lang_name":"C++","time":"1Â year","timestamp":1662387865,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/792156029/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"8.1 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        ListNode *slow = head, *fast = head;\n        \n        if (!head || head->next == NULL)\n            return false;\n        \n        fast = head->next->next;\n        while (fast != NULL && slow != NULL) {\n            if (slow == fast)\n                return true;\n            \n            slow = slow->next;\n            if (fast->next != NULL)\n                fast = fast->next->next;\n            else\n                break;\n        }\n        \n        return false;\n    }\n};","compare_result":"111111111111111111111","title_slug":"linked-list-cycle","has_notes":false,"flag_type":1}