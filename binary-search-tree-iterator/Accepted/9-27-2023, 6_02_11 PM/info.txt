{"id":1060418834,"lang":"cpp","lang_name":"C++","time":"1 day, 2 hours","timestamp":1695808931,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/1060418834/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"25.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass BSTIterator {\n    vector<TreeNode*> v;\n    int pos = -1;\npublic:\n    BSTIterator(TreeNode* root) {\n        v.clear();\n        constructTree(root);\n        pos = 0;\n    }\n\n    void constructTree(TreeNode* root) {\n        if (!root)\n            return;\n        constructTree(root->left);\n        v.push_back(root);\n        constructTree(root->right);\n    }\n    \n    int next() {\n        return v.at(pos++)->val;\n    }\n    \n    bool hasNext() {\n        return pos < v.size();\n    }\n};\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator* obj = new BSTIterator(root);\n * int param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator","has_notes":false,"flag_type":1}