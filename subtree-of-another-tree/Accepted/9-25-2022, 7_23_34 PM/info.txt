{"id":808230399,"lang":"cpp","lang_name":"C++","time":"1Â year","timestamp":1664105014,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/808230399/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"28.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSubtree(TreeNode* root, TreeNode* subRoot) {\n        if (!root)\n            return false;\n        \n        bool is_sub = false;\n        is_sub = helper(root, subRoot);\n        if (is_sub)\n            return true;\n        is_sub |= isSubtree(root->left, subRoot);\n        is_sub |= isSubtree(root->right, subRoot);\n\n        return is_sub;\n    }\n    \n    \n    bool helper(TreeNode* root, TreeNode* subRoot) {\n        if ((root && !subRoot) || (!root && subRoot))\n            return false;\n        if (!root && !subRoot)\n            return true;\n        if (root->val != subRoot->val)\n            return false;\n        \n        bool is_sub = true;\n        is_sub &= helper(root->left, subRoot->left);\n        is_sub &= helper(root->right, subRoot->right);\n\n        return is_sub;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree","has_notes":false,"flag_type":1}