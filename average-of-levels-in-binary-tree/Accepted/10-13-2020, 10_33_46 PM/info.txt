{"id":408247714,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1602599626,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/408247714/","is_pending":"Not Pending","title":"Average of Levels in Binary Tree","memory":"23.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<double> averageOfLevels(TreeNode* root) {\n        vector<vector<int>> temp;\n        helper(root, temp, 0);\n        \n        vector<double> res;\n        for (int i=0; i<temp.size(); i++) {\n            double te = 0.0;\n            for (int j=0; j<temp[i].size(); j++) {\n                te += (double) temp[i][j];\n            }\n            double average = (double) (te / (double) temp[i].size());\n            res.push_back(average);\n        }\n        \n        return res;\n    }\n    \n    void helper(TreeNode* root, vector<vector<int>>& list, int level) {\n        if (root == nullptr)\n            return;\n        \n        if (list.size() <= level) {\n            vector<int> temp;\n            temp.push_back(root->val);\n            list.push_back(temp);\n        } else {\n            list[level].push_back(root->val);\n        }\n        \n        if (root->left != nullptr)\n            helper(root->left, list, level + 1);\n        if (root->right != nullptr)\n            helper(root->right, list, level + 1);\n\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"average-of-levels-in-binary-tree","has_notes":false,"flag_type":1}