{"id":1025935983,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1692462230,"status":10,"status_display":"Accepted","runtime":"196 ms","url":"/submissions/detail/1025935983/","is_pending":"Not Pending","title":"Degree of an Array","memory":"24.8 MB","code":"class Solution {\npublic:\n    int findShortestSubArray(vector<int>& nums) {\n        unordered_map<int, int> tmp;\n        for (auto i = 0; i < nums.size(); i++) {\n            tmp[nums[i]]++;  \n        }\n        \n        int max_num = nums[0], max_cnt = tmp[nums[0]];\n        for (auto i : tmp) {\n            if (i.second > max_cnt) {\n                max_cnt = i.second;\n                max_num = i.first;\n            }\n        }\n        cout << \"max_num \" << max_num << \"; max_cnt: \" << max_cnt << endl;\n        int res = INT_MAX;\n        for (auto i : tmp) {\n            if (i.second == max_cnt) {\n                int head_idx = -1, tail_idx = -1;\n                for (auto j = 0; j < nums.size() && (head_idx < 0 || tail_idx < 0); j++) {\n                    if (head_idx < 0 && nums[j] == i.first)\n                        head_idx = j;\n                    if (tail_idx < 0 && nums[nums.size() - 1 - j] == i.first)\n                        tail_idx = nums.size() - 1 - j;\n                }\n                res = min(res, tail_idx - head_idx);\n            }\n        }\n\n        return res + 1;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"degree-of-an-array","has_notes":false,"flag_type":1}