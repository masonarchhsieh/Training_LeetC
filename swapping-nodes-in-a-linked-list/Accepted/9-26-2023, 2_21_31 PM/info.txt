{"id":1059420969,"lang":"cpp","lang_name":"C++","time":"2 days, 6 hours","timestamp":1695709291,"status":10,"status_display":"Accepted","runtime":"398 ms","url":"/submissions/detail/1059420969/","is_pending":"Not Pending","title":"Swapping Nodes in a Linked List","memory":"180.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    int findLength(ListNode *node) {\n        int l = 0;\n        while (node) {\n            node = node->next;\n            l++;\n        }\n        return l;\n    }\n\n    ListNode* findNode(ListNode* head, int pos) {\n        if (!head || pos <= 0)\n            return head;\n        while (head && pos > 1) {\n            pos--;\n            head = head->next;\n        }\n\n        return head;\n    }\n\n    ListNode* swapNodes(ListNode* head, int k) {\n        if (!head)\n            return head;\n        int length = findLength(head);\n        ListNode *node1 = findNode(head, k);\n        ListNode *node2 = findNode(head, length - k + 1);\n        swapNode(node1, node2);\n\n        return head;\n    }\n\n    void swapNode(ListNode *n1, ListNode *n2) {\n        if (!n1 || !n2)\n            return;\n        swap(n1->val, n2->val);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"swapping-nodes-in-a-linked-list","has_notes":false,"flag_type":1}