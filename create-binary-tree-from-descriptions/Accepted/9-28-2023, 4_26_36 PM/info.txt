{"id":1061231151,"lang":"cpp","lang_name":"C++","time":"4 hours, 7 minutes","timestamp":1695889596,"status":10,"status_display":"Accepted","runtime":"731 ms","url":"/submissions/detail/1061231151/","is_pending":"Not Pending","title":"Create Binary Tree From Descriptions","memory":"278 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {\n        unordered_map<int, TreeNode*> m;\n        unordered_set<int> child_set;\n        TreeNode* head = NULL;\n        if (descriptions.size() == 0)\n            return head;\n        for (auto i = 0; i < descriptions.size(); i++) {\n            bool found = false, found_child = false;\n            TreeNode* child;\n            TreeNode* parent;\n            if (m.find(descriptions[i][1]) != m.end()) {\n                child = m[descriptions[i][1]];\n            } else {\n                child = new TreeNode(descriptions[i][1]);\n                m[descriptions[i][1]] = child;\n            }\n            child_set.insert(child->val);\n            if (m.find(descriptions[i][0]) != m.end()) {\n                parent = m[descriptions[i][0]];\n            } else {\n                parent = new TreeNode(descriptions[i][0]);\n                m[descriptions[i][0]] = parent;\n            }\n            // left child\n            if (descriptions[i][2] == 1) {\n                parent->left = child;\n            } else {\n                parent->right = child;\n            }\n        }\n        for (auto &i : descriptions) {\n            if (child_set.find(i[0]) == child_set.end()) {\n                head = m[i[0]];\n                break;\n            }\n        }\n        return head;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"create-binary-tree-from-descriptions","has_notes":false,"flag_type":1}