{"id":408254749,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1602601053,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/408254749/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"13.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool leafSimilar(TreeNode* root1, TreeNode* root2) {\n        vector<int> leafs1, leafs2;\n        getLeafs(root1, leafs1);\n        getLeafs(root2, leafs2);\n        \n        int sum1 = 0, sum2 = 0;\n        for (int i=0; i<leafs1.size(); i++)\n            sum1 += leafs1[i];\n        for (int i=0; i<leafs2.size(); i++)\n            sum2 += leafs2[i];\n        \n        return leafs1 == leafs2;\n    }\n    \n    void getLeafs(TreeNode* root, vector<int>& leafs) {\n        if (root == nullptr)\n            return;\n        if (root->left == nullptr && root->right == nullptr)\n            leafs.push_back(root->val);\n        \n        getLeafs(root->left, leafs);\n        getLeafs(root->right, leafs);\n    }\n};","compare_result":"1111111111111111111111111111111111111111","title_slug":"leaf-similar-trees","has_notes":false,"flag_type":1}