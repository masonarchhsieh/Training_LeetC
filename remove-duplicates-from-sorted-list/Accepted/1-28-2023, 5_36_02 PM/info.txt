{"id":886750324,"lang":"cpp","lang_name":"C++","time":"8Â months","timestamp":1674898562,"status":10,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/886750324/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted List","memory":"12.1 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n\nstatic bool Pred(ListNode *l1, ListNode *l2) {\n     return (l1->val == l2->val);\n }\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        if (!head)\n            return head;\n        vector<ListNode*> list;\n        ListNode *itr = head;\n        while (itr) {\n            list.push_back(itr);\n            itr = itr->next;\n        }\n\n        vector<ListNode*>::iterator it;\n        it = std::unique(list.begin(), list.end(), Pred);\n        list.resize(std::distance(list.begin(), it));\n\n        for (int i = 1; i < list.size(); i++)\n            list[i-1]->next = list[i];\n        list[list.size() -1]->next = nullptr;\n\n        return list[0];\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-list","has_notes":false,"flag_type":1}