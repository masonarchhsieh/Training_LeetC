{"id":1061240610,"lang":"cpp","lang_name":"C++","time":"3 hours, 51 minutes","timestamp":1695890574,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1061240610/","is_pending":"Not Pending","title":"Find Bottom Left Tree Value","memory":"22.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int findBottomLeftValue(TreeNode* root) {\n        if (!root)\n            return -1;\n        pair<int, int> res = { 0 , root->val };\n        helper(root, res, 0);\n        return res.second;\n    }\n\n    void helper(TreeNode* root, pair<int, int>& p, int level) {\n        if (!root)\n            return;\n        if (root->left || root->right) {\n            helper(root->left, p, level + 1);\n            helper(root->right, p, level + 1);\n        }\n        if (p.first < level) {\n            p = make_pair(level, root->val);\n        }\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-bottom-left-tree-value","has_notes":false,"flag_type":1}