{"id":1058491414,"lang":"cpp","lang_name":"C++","time":"3 days, 6 hours","timestamp":1695622422,"status":10,"status_display":"Accepted","runtime":"188 ms","url":"/submissions/detail/1058491414/","is_pending":"Not Pending","title":"Maximum Twin Sum of a Linked List","memory":"116.9 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverse(ListNode *head) {\n        if (!head)\n            return NULL;\n        ListNode *prev = NULL, *tail = head, *nxt = NULL;\n        while (tail) {\n            nxt = tail->next;\n            tail->next = prev;\n            prev = tail;\n            tail = nxt;\n        }\n\n        return prev;\n    }\n\n\n    int pairSum(ListNode* head) {\n        if (!head)\n            return 0;\n        ListNode *slow = head, *fast = head;\n\n        while (fast && fast->next) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        \n        int res = 0;\n        ListNode *rv = reverse(slow);\n        while (rv) {\n            res = max(res, rv->val + head->val);\n            rv = rv->next;\n            head = head->next;\n        }\n\n        return res;\n    }\n    // int pairSum(ListNode* head) {\n    //     if (!head)\n    //         return 0;\n    //     vector<int> v;\n\n    //     while (head) {\n    //         v.push_back(head->val);\n    //         head = head->next;\n    //     }\n    //     int res = 0;\n\n    //     for (auto i = 0; i < v.size() / 2; i++) {\n    //         res = max(res, v.at(i) + v.at(v.size() - 1 - i));\n    //     }\n\n\n    //     return res;\n    // }\n};","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"maximum-twin-sum-of-a-linked-list","has_notes":false,"flag_type":1}