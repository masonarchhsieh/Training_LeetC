{"id":409074605,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1602773287,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/409074605/","is_pending":"Not Pending","title":"Sum Root to Leaf Numbers","memory":"13.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        vector<int> tree;\n        int res = 0;\n        if (root != nullptr)\n            helper(root, tree, \"\");\n        \n        for (int i=0; i<tree.size(); i++)\n            res += tree[i];\n        \n        return res;\n    }\n    \n    void helper(TreeNode* root, vector<int>& tree, string prev) {\n        \n        prev = prev + std::to_string(root->val);\n        if (root->left == nullptr && root->right == nullptr) {\n            int rtl = std::stoi(prev);\n            tree.push_back(rtl);\n        }\n        \n        if (root->left != nullptr) {\n            helper(root->left, tree, prev);\n        }\n        if (root->right != nullptr) {\n            helper(root->right, tree, prev);\n        }\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-root-to-leaf-numbers","has_notes":false,"flag_type":1}