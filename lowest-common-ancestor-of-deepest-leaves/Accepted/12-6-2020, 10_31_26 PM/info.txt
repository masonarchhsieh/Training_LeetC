{"id":427827003,"lang":"cpp","lang_name":"C++","time":"2 years, 9 months","timestamp":1607265086,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/427827003/","is_pending":"Not Pending","title":"Lowest Common Ancestor of Deepest Leaves","memory":"21.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lcaDeepestLeaves(TreeNode* root) {\n        if (height(root->left) == height(root->right))\n            return root;\n\n        if (height(root->left) > height(root->right))\n            root = root->left;\n        else\n            root = root->right;\n        \n        return lcaDeepestLeaves(root);     \n    }\n    \n    int height(TreeNode* root) {\n        if (root == NULL)\n            return 0;\n        \n        return 1 + max(height(root->left), height(root->right));\n    }\n    \n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-deepest-leaves","has_notes":false,"flag_type":1}