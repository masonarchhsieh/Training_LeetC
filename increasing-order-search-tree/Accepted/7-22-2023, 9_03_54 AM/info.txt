{"id":1000556547,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1689987834,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1000556547/","is_pending":"Not Pending","title":"Increasing Order Search Tree","memory":"7.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    vector<TreeNode*> list;\npublic:\n    TreeNode* increasingBST(TreeNode* root) {\n        if (!root)\n            return NULL;\n        inOrder(root);\n        list.push_back(NULL);\n        for (int i = 1; i < list.size(); i++) {\n            list[i - 1]->right = list[i];\n            list[i - 1]->left = NULL;\n        }\n\n\n        return list[0];\n    }\n\n    void inOrder(TreeNode *root) {\n        if (!root)\n            return;\n        \n        inOrder(root->left);\n        list.push_back(root);\n        inOrder(root->right);\n    }\n};","compare_result":"11111111111111111111111111111111111111","title_slug":"increasing-order-search-tree","has_notes":false,"flag_type":1}