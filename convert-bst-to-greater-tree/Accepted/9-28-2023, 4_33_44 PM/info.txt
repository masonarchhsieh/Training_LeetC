{"id":1061235237,"lang":"cpp","lang_name":"C++","time":"4Â hours","timestamp":1695890024,"status":10,"status_display":"Accepted","runtime":"79 ms","url":"/submissions/detail/1061235237/","is_pending":"Not Pending","title":"Convert BST to Greater Tree","memory":"34.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    vector<int> v;\npublic:\n    TreeNode* convertBST(TreeNode* root) {\n        if (!root || (!root->left && !root->right))\n            return root;\n        travelTree(root);\n        sort(v.begin(), v.end());\n        updateVal(root);\n\n        return root;\n    }\n\n    void travelTree(TreeNode* root) {\n        if (!root)\n            return;\n        travelTree(root->left);\n        v.push_back(root->val);\n        travelTree(root->right);\n    }\n\n    void updateVal(TreeNode* root) {\n        if (!root)\n            return;\n        vector<int>::iterator it = lower_bound(v.begin(), v.end(), root->val);\n        root->val = accumulate(it, v.end(), 0);\n        updateVal(root->left);\n        updateVal(root->right);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"convert-bst-to-greater-tree","has_notes":false,"flag_type":1}