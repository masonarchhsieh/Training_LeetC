{"id":1058552093,"lang":"cpp","lang_name":"C++","time":"3 days, 4 hours","timestamp":1695628119,"status":10,"status_display":"Accepted","runtime":"118 ms","url":"/submissions/detail/1058552093/","is_pending":"Not Pending","title":"Sort List","memory":"53.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeLists(ListNode* first, ListNode* second) {\n        if (first == NULL)\n            return second;\n        if (second == NULL)\n            return first;\n        if (first->val <= second->val) {\n            first->next = mergeLists(first->next, second);\n            return first;\n        }\n\n        second->next = mergeLists(first, second->next);\n        return second;\n    }\n\n    ListNode* sortList(ListNode* head) {\n        if (head == NULL || head->next == NULL)\n            return head;\n\n        ListNode *prev;\n        ListNode *slow = head;\n        ListNode *fast = head;\n        while (fast != NULL && fast->next != NULL) {\n            prev = slow;\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        prev->next = NULL;\n        ListNode *l1 = sortList(head);\n        ListNode *l2 = sortList(slow);\n\n        return mergeLists(l1, l2);\n    }\n};","compare_result":"111111111111111111111111111111","title_slug":"sort-list","has_notes":false,"flag_type":1}