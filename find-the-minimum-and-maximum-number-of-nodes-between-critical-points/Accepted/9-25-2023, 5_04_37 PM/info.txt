{"id":1058607788,"lang":"cpp","lang_name":"C++","time":"3 days, 3 hours","timestamp":1695632677,"status":10,"status_display":"Accepted","runtime":"161 ms","url":"/submissions/detail/1058607788/","is_pending":"Not Pending","title":"Find the Minimum and Maximum Number of Nodes Between Critical Points","memory":"117.8 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> nodesBetweenCriticalPoints(ListNode* head) {\n        vector<int> pos;\n        int t = head->val;\n        int cnt = 0;\n        head = head->next;\n        while (head->next) {\n            // local maxima\n            if (t < head->val && head->next->val < head->val)\n                pos.push_back(cnt);\n            // local minima\n            else if (t > head->val && head->next->val > head->val)\n                pos.push_back(cnt);\n            t = head->val;\n            head = head->next;\n            cnt++;\n        }\n\n        if (pos.size() < 2)\n            return { -1, -1 };\n        int min_d = INT_MAX;\n        for (auto i = 1; i < pos.size(); i++)\n            min_d = min (min_d, pos[i] - pos[i-1]);\n\n        return {min_d, pos.back() - pos.front()};\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-minimum-and-maximum-number-of-nodes-between-critical-points","has_notes":false,"flag_type":1}