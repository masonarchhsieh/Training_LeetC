{"id":1060363355,"lang":"cpp","lang_name":"C++","time":"1 day, 4 hours","timestamp":1695802749,"status":10,"status_display":"Accepted","runtime":"83 ms","url":"/submissions/detail/1060363355/","is_pending":"Not Pending","title":"Deepest Leaves Sum","memory":"62.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\nbool compare(const pair<int, int>& p1, const pair<int, int>& p2) {\n    return p1.first > p2.first;\n}\n\nclass Solution {\npublic:\n    int deepestLeavesSum(TreeNode* root) {\n        if (!root)\n            return 0;\n        queue<TreeNode*> q;\n        int sum = 0;\n        q.push(root);\n        while (!q.empty()) {\n            int size = q.size();\n            sum = 0;\n            for (auto i = 0; i < size; i++) {\n                TreeNode* t = q.front();\n                q.pop();\n\n                sum += t->val;\n                if (t->left) {\n                    q.push(t->left);\n                }\n                if (t->right) {\n                    q.push(t->right);\n                }\n            }\n        }\n\n        return sum;\n    }\n\n    // int deepestLeavesSum(TreeNode* root) {\n    //     if (!root)\n    //         return 0;\n    //     vector<pair<int, int>> v;\n    //     travelTree(root, v, 0);\n    //     sort(v.begin(), v.end(), compare);\n    //     int sum = v[0].second;\n    //     for (auto i = 1; i < v.size(); i++) {\n    //         if (v[i].first == v[0].first) {\n    //             sum += v[i].second;\n    //             continue;\n    //         }\n    //         break;\n    //     }\n    //     return sum;\n    // }\n\n    // void travelTree(TreeNode* root, vector<pair<int,int>>& v, int level) {\n    //     if (!root)\n    //         return;\n        \n    //     if (!root->left && !root->right) {\n    //         v.push_back(make_pair(level, root->val));\n    //         return;\n    //     }\n    //     travelTree(root->left, v, level + 1);\n    //     travelTree(root->right, v, level + 1);\n    // }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"deepest-leaves-sum","has_notes":false,"flag_type":1}