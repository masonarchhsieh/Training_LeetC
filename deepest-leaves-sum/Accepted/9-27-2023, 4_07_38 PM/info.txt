{"id":1060357470,"lang":"cpp","lang_name":"C++","time":"1 day, 4 hours","timestamp":1695802058,"status":10,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/1060357470/","is_pending":"Not Pending","title":"Deepest Leaves Sum","memory":"62.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\nbool compare(const pair<int, int>& p1, const pair<int, int>& p2) {\n    return p1.first > p2.first;\n}\n\nclass Solution {\npublic:\n    int deepestLeavesSum(TreeNode* root) {\n        if (!root)\n            return 0;\n        vector<pair<int, int>> v;\n        travelTree(root, v, 0);\n        sort(v.begin(), v.end(), compare);\n        int sum = v[0].second;\n        for (auto i = 1; i < v.size(); i++) {\n            if (v[i].first == v[0].first) {\n                sum += v[i].second;\n                continue;\n            }\n            break;\n        }\n        return sum;\n    }\n\n    void travelTree(TreeNode* root, vector<pair<int,int>>& v, int level) {\n        if (!root)\n            return;\n        \n        if (!root->left && !root->right) {\n            v.push_back(make_pair(level, root->val));\n            return;\n        }\n        travelTree(root->left, v, level + 1);\n        travelTree(root->right, v, level + 1);\n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"deepest-leaves-sum","has_notes":false,"flag_type":1}