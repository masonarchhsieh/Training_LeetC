{"id":1061247379,"lang":"cpp","lang_name":"C++","time":"3 hours, 39 minutes","timestamp":1695891286,"status":10,"status_display":"Accepted","runtime":"168 ms","url":"/submissions/detail/1061247379/","is_pending":"Not Pending","title":"Maximum Level Sum of a Binary Tree","memory":"111 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    vector<vector<int>> v;\npublic:\n    int maxLevelSum(TreeNode* root) {\n        if (!root)\n            return 0;\n        int res = root->val;\n        int _res = 1;\n        travelTree(root, 0);\n        for (auto i = 1; i < v.size(); i++) {\n            int t = accumulate(v.at(i).begin(), v.at(i).end(), 0);\n            if (res < t) {\n                res = t;\n                _res = i + 1;\n            }\n        }\n        return _res;\n    }\n\n    void travelTree(TreeNode* root, int level) {\n        if (!root)\n            return;\n        \n        if (v.size() <= level) {\n            vector<int> t = { root->val };\n            v.push_back(t);\n        } else {\n            v[level].push_back(root->val);\n        }\n        travelTree(root->left, level + 1);\n        travelTree(root->right, level + 1);\n    }\n};","compare_result":"11111111111111111111111111111111111111111","title_slug":"maximum-level-sum-of-a-binary-tree","has_notes":false,"flag_type":1}