{"id":1059763404,"lang":"cpp","lang_name":"C++","time":"1Â day, 20Â hours","timestamp":1695742519,"status":10,"status_display":"Accepted","runtime":"176 ms","url":"/submissions/detail/1059763404/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"114.7 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverse(ListNode* head) {\n        ListNode *prev = NULL, *cur = head, *nxt = NULL;\n        while (cur) {\n            nxt = cur->next;\n            cur->next = prev;\n            prev = cur;\n            cur = nxt;\n        }\n        return prev;\n    }\n\n    bool isPalindrome(ListNode* head) {\n        ListNode *slow = head, *fast = head, *t = head;\n        while (fast && fast->next) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        slow = reverse(slow);\n\n        while (slow) {\n            if (t->val != slow->val)\n                return false;\n            t = t->next;\n            slow = slow->next;\n        }\n\n        return true;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-linked-list","has_notes":false,"flag_type":1}