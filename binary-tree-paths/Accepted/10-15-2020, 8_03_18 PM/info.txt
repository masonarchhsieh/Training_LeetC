{"id":409034161,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1602763398,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/409034161/","is_pending":"Not Pending","title":"Binary Tree Paths","memory":"13.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<string> binaryTreePaths(TreeNode* root) {\n        vector<vector<int>> tree;\n        vector<string> res;\n        helper(root, res, \"\");\n        \n        return res;\n        \n    }\n    \n    void helper(TreeNode* root, vector<string>& list, string prev) {       \n        if (root != nullptr) {\n            string temp = prev + std::to_string(root->val);\n        \n            if (root->left != nullptr) {\n                helper(root->left, list, temp + \"->\");\n            }\n\n            if (root->right != nullptr) {\n                helper(root->right, list, temp + \"->\");\n            }\n\n            if (root->left == nullptr && root->right == nullptr) {\n                list.push_back(temp);\n            }\n        }\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-paths","has_notes":false,"flag_type":1}