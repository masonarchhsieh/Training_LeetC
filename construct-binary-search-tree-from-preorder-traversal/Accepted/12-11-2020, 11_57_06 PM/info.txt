{"id":429586844,"lang":"cpp","lang_name":"C++","time":"2 years, 9 months","timestamp":1607702226,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/429586844/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"14.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* bstFromPreorder(vector<int>& preorder) {\n        return helper(preorder.begin(), preorder.end());\n    }\n    \n    \n    TreeNode* helper(vector<int>::iterator begin, vector<int>::iterator end) {\n        if (begin == end)\n            return nullptr;\n        \n        auto node = new TreeNode(*begin);\n        auto bound = upper_bound(begin+1, end, *begin);\n        \n        node->left = helper(begin+1, bound);\n        node->right = helper(bound, end);\n        return node;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal","has_notes":false,"flag_type":1}