{"id":429556818,"lang":"cpp","lang_name":"C++","time":"2 years, 9 months","timestamp":1607692978,"status":10,"status_display":"Accepted","runtime":"156 ms","url":"/submissions/detail/429556818/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"48.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    vector<TreeNode*> tree;\npublic:\n    TreeNode* balanceBST(TreeNode* root) {\n        buildTree(root);\n        return construct(0, tree.size());\n    }\n    \n    TreeNode* construct(int l, int r) {\n        if (l >= r)\n            return NULL;\n        int mid = l + (r - l) / 2;\n        TreeNode* root = tree[mid];\n        \n        root->left = construct(l, mid);\n        root->right = construct(mid+1, r);\n        \n        return root;\n    }\n       \n    void buildTree(TreeNode* root) {\n        if (!root)\n            return;\n        \n        buildTree(root->left);\n        tree.push_back(root);\n        buildTree(root->right);\n    }\n    \n};","compare_result":"1111111111111111","title_slug":"balance-a-binary-search-tree","has_notes":false,"flag_type":1}