{"id":1040127750,"lang":"cpp","lang_name":"C++","time":"3 weeks, 3 days","timestamp":1693816617,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1040127750/","is_pending":"Not Pending","title":"Most Visited Sector in  a Circular Track","memory":"11.2 MB","code":"class Solution {\npublic:\n    vector<int> mostVisited(int n, vector<int>& rounds) {\n        vector<int> pts;\n        for (auto i = 0; i < n; i++)\n            pts.push_back(0);\n\n        for (auto i = 1; i < rounds.size(); i++) {\n            if (i == 1)\n                pts[(rounds[i-1] - 1) % n]++;\n            for (auto j = 1; j < n; j++) {\n                pts[(rounds[i-1] + j - 1) % n]++;\n                if (rounds[i] - 1 == (rounds[i-1] + j - 1) % n)\n                    break;\n            }\n        }\n        vector<int> res;\n        vector<int>::iterator it = max_element(pts.begin(), pts.end());\n        res.push_back(it - pts.begin() + 1);\n        for (auto i = it + 1; i != pts.end(); i++) {\n            if (*i == *it)\n                res.push_back(i - pts.begin() + 1);\n        }\n        return res; \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"most-visited-sector-in-a-circular-track","has_notes":false,"flag_type":1}