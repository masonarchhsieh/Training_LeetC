{"id":1061359929,"lang":"cpp","lang_name":"C++","time":"30Â minutes","timestamp":1695902623,"status":10,"status_display":"Accepted","runtime":"1030 ms","url":"/submissions/detail/1061359929/","is_pending":"Not Pending","title":"Convert Sorted List to Binary Search Tree","memory":"26.3 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n// https://www.geeksforgeeks.org/insertion-in-an-avl-tree/\npublic:\n    TreeNode* sortedListToBST(ListNode* head) {\n        TreeNode* root = NULL;\n\n        while (head) {\n            root = insert(root, head->val);\n            head = head->next;\n        }\n\n        return root;\n    }\n\n    TreeNode* insert(TreeNode* node, int value) {\n        if (!node)\n            return new TreeNode(value);\n        if (value < node->val)\n            node->left = insert(node->left, value);\n        else if (value > node->val)\n            node->right = insert(node->right, value);\n        else\n            return node;\n        int balance = getBalance(node);\n        // left left\n        if (balance > 1 && value < node->left->val)\n            return rightRotate(node);\n        // right right\n        if (balance < -1 && value > node->right->val)\n            return leftRotate(node);\n        // left right\n        if (balance > 1 && value > node->left->val) {\n            node->left = leftRotate(node->left);\n            return rightRotate(node);\n        }\n        // right left\n        if (balance < -1 && value < node->right->val) {\n            node->right = rightRotate(node->right);\n            return leftRotate(node);\n        }\n\n        return node;\n    }\n\n    int getBalance(TreeNode *root) {\n        if (!root)\n            return 0;\n        return Height(root->left) - Height(root->right);\n    }\n    int Height(TreeNode *root) {\n        if (!root)\n            return 0;\n        return 1 + max(Height(root->left), Height(root->right));\n    }\n\n    TreeNode* rightRotate(TreeNode* node) {\n        TreeNode* l_node = node->left;\n        TreeNode* lr_node = l_node->right;\n\n        //perform rotation\n        l_node->right = node;\n        node->left = lr_node;\n\n        return l_node;\n    }\n    \n    TreeNode* leftRotate(TreeNode* node) {\n        TreeNode* r_node = node->right;\n        TreeNode* rl_node = r_node->left;\n\n        //perform rotation\n        r_node->left = node;\n        node->right = rl_node;\n\n        return r_node;\n    }\n    \n};","compare_result":"11111111111111111111111111111111","title_slug":"convert-sorted-list-to-binary-search-tree","has_notes":false,"flag_type":1}