{"id":1061272971,"lang":"cpp","lang_name":"C++","time":"2 hours, 56 minutes","timestamp":1695893852,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/1061272971/","is_pending":"Not Pending","title":"Complete Binary Tree Inserter","memory":"22.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass CBTInserter {\n    vector<TreeNode*> v;\npublic:\n    CBTInserter(TreeNode* root) {\n        v.clear();\n        v.push_back(root);\n        for (auto i = 0; i < v.size(); i++) {\n            if (v[i]->left)\n                v.push_back(v[i]->left);\n            if (v[i]->right)\n                v.push_back(v[i]->right);\n        }\n    }\n    \n    int insert(int val) {\n        int N = v.size();\n        TreeNode *t = new TreeNode(val);\n        v.push_back(t);\n        // left node\n        if (N % 2) {\n            v[(N - 1) / 2]->left = t;\n        } else {\n            v[(N - 1) / 2]->right = t;\n        }\n        return v[(N - 1) / 2]->val;\n    }\n    \n    TreeNode* get_root() {\n        return v[0];\n    }\n};\n\n/**\n * Your CBTInserter object will be instantiated and called as such:\n * CBTInserter* obj = new CBTInserter(root);\n * int param_1 = obj->insert(val);\n * TreeNode* param_2 = obj->get_root();\n */","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"complete-binary-tree-inserter","has_notes":false,"flag_type":1}