{"id":1058599050,"lang":"cpp","lang_name":"C++","time":"3 days, 3 hours","timestamp":1695631834,"status":10,"status_display":"Accepted","runtime":"207 ms","url":"/submissions/detail/1058599050/","is_pending":"Not Pending","title":"Merge In Between Linked Lists","memory":"94.7 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* findEndNode(ListNode *l, int value) {\n        if (!l)\n            return l;\n        while (l->next && value != 1) {\n            l = l->next;\n            value--;\n        }\n        return l;\n    }\n\n    ListNode* mergeInBetween(ListNode* list1, int a, int b, ListNode* list2) {\n        if (!list1 || !list2)\n            return NULL;\n        ListNode *t_l1 = findEndNode(list1, a);\n        cout << t_l1->val << endl;\n        ListNode *nxt = findEndNode(t_l1, b - a + 3);\n        cout << nxt->val << endl;\n        t_l1->next = list2;\n        ListNode *end_l2 = findEndNode(list2, -1);\n        end_l2->next = nxt;\n\n        return list1;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-in-between-linked-lists","has_notes":false,"flag_type":1}