{"id":808238275,"lang":"cpp","lang_name":"C++","time":"1Â year","timestamp":1664106041,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/808238275/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node II","memory":"17.7 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;\n\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val, Node* _left, Node* _right, Node* _next)\n        : val(_val), left(_left), right(_right), next(_next) {}\n};\n*/\n\nclass Solution {\npublic:\n    Node* connect(Node* root) {\n        if (!root)\n            return NULL;\n        \n        Node *head = root;\n        queue<Node*> qtree;\n        qtree.push(root);\n        \n        while (!qtree.empty()) {\n            int size = qtree.size();\n            for (int i=0; i<size; i++) {\n                auto node = qtree.front();\n                qtree.pop();\n                if (i == size - 1)\n                    node->next = NULL;\n                else\n                    node->next = qtree.front();\n            \n                if (node->left)\n                    qtree.push(node->left);\n                if (node->right)\n                    qtree.push(node->right);\n            }\n        }\n        \n        return head;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"populating-next-right-pointers-in-each-node-ii","has_notes":false,"flag_type":1}