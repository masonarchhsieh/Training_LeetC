{"id":1053327593,"lang":"cpp","lang_name":"C++","time":"1 week, 2 days","timestamp":1695107500,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1053327593/","is_pending":"Not Pending","title":"Rotate List","memory":"12.2 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n        int len = getLength(head);\n        if (!head)\n            return head;\n        if (len == 1 || k == 0 || (k % len) == 0)\n            return head;\n\n        ListNode *_itr = head, *prev = head;\n        for (auto i = 0; i < len - (k % len); i++) {\n            prev = _itr;\n            _itr = _itr->next;\n        }\n        cout << _itr->val << endl;\n        // link tail to prev\n        prev->next = NULL;\n        prev = _itr;\n        while (_itr->next) {\n            _itr = _itr->next;\n        }\n        _itr->next = head;\n        head = prev;\n\n\n        return head;\n    }\n\n    int getLength(ListNode* head) {\n        int n = 0;\n\n        while (head) {\n            head = head->next;\n            n++;\n        }\n\n        return n;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotate-list","has_notes":false,"flag_type":1}