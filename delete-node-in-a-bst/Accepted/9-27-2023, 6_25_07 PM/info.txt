{"id":1060431412,"lang":"cpp","lang_name":"C++","time":"1 day, 2 hours","timestamp":1695810307,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/1060431412/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"33.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        if (!root)\n            return root;\n        // delete the node with the same value of the key\n        if (root->val == key) {\n            // construct left tree\n            return constructTree(root->left, root->right);\n        }\n\n        // search right\n        if (root->val < key) {\n            root->right = deleteNode(root->right, key);\n            return root;\n        }\n        root->left = deleteNode(root->left, key);\n        return root;\n    }\n\n    TreeNode* constructTree(TreeNode* t1, TreeNode* t2) {\n        if (!t1)\n            return t2;\n        if (!t2)\n            return t1;\n        if (t1->val < t2->val) {\n            t2->left = constructTree(t1, t2->left);\n            return t2;\n        }\n        t1->left = constructTree(t1->left, t2);\n        return t1;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-node-in-a-bst","has_notes":false,"flag_type":1}