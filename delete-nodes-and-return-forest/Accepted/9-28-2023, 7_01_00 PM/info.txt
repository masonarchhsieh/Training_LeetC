{"id":1061323821,"lang":"cpp","lang_name":"C++","time":"1 hour, 33 minutes","timestamp":1695898860,"status":10,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/1061323821/","is_pending":"Not Pending","title":"Delete Nodes And Return Forest","memory":"25.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {\n        if (!root)\n            return {};\n        vector<TreeNode*> res;\n        helper(root, root, to_delete, res, false);\n        return res;\n    }\n\n    void helper(TreeNode* root, TreeNode* parent, vector<int>& to_delete, vector<TreeNode*>& res, bool isSaved) {\n        if (!root)\n            return;\n        if (find(to_delete.begin(), to_delete.end(), root->val) != to_delete.end()) {\n            parent->left = (parent->left == root)? NULL : parent->left;\n            parent->right = (parent->right == root)? NULL : parent->right;\n            helper(root->left, root->left, to_delete, res, false);\n            helper(root->right, root->right, to_delete, res, false);\n            return;\n        }\n        if (!isSaved) {\n            res.push_back(root);\n        }\n        helper(root->left, root, to_delete, res, true);\n        helper(root->right, root, to_delete, res, true);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-nodes-and-return-forest","has_notes":false,"flag_type":1}