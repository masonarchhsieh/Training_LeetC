{"id":1056095541,"lang":"cpp","lang_name":"C++","time":"6 days, 5 hours","timestamp":1695367572,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/1056095541/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"26.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    int preInd = 0;\npublic:\n    TreeNode* createTree(vector<int>& preorder, vector<int>& inorder, int start, int end) {\n        if (start > end)\n            return NULL;\n        TreeNode* node = new TreeNode(preorder[preInd++]);\n        int pos;\n        for (auto i = start; i <= end; i++) {\n            if (inorder[i] == node->val) {\n                pos = i;\n                break;\n            }\n        }\n        node->left = createTree(preorder, inorder, start, pos - 1);\n        node->right = createTree(preorder, inorder, pos + 1, end);\n        return node;\n        \n    }\n\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        if (preorder.empty() || inorder.empty())\n            return NULL;\n        if (preorder.size() != inorder.size())\n            return NULL;\n        return createTree(preorder, inorder, 0, preorder.size() - 1);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}