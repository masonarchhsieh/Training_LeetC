{"id":409825334,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1602945369,"status":10,"status_display":"Accepted","runtime":"168 ms","url":"/submissions/detail/409825334/","is_pending":"Not Pending","title":"Insert into a Binary Search Tree","memory":"60 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* insertIntoBST(TreeNode* root, int val) {\n        if (root == nullptr) {\n            TreeNode* t = new TreeNode(val);\n            return t;\n        }\n        \n        TreeNode* itr = root;\n        while (itr != nullptr) {\n            if (val < itr->val && itr->left != nullptr)\n                itr = itr->left;\n            else if (val > itr->val && itr->right != nullptr)\n                itr = itr->right;\n            else {\n                TreeNode* t = new TreeNode(val);\n                if (val < itr->val)\n                    itr->left = t;\n                else\n                    itr->right = t;\n                \n                break;\n            }\n        }\n        \n        return root;\n    }\n};","compare_result":"11111111111111111111111111111111111","title_slug":"insert-into-a-binary-search-tree","has_notes":false,"flag_type":1}