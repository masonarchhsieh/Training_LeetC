{"id":1060387148,"lang":"cpp","lang_name":"C++","time":"1 day, 3 hours","timestamp":1695805468,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1060387148/","is_pending":"Not Pending","title":"Count Nodes Equal to Average of Subtree","memory":"12.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int averageOfSubtree(TreeNode* root) {\n        int cnt = 0;\n        pair<int, int> res = helper(root, cnt);\n\n        return cnt;\n    }\n\n    pair<int, int> helper(TreeNode* root, int &cnt) {\n        if (!root)\n            return {0, 0};\n        pair p = make_pair(1, root->val);\n        if (!root->left && !root->right) {\n            cnt++;\n            return p;\n        }\n        if (root->left) {\n            pair tmp_l = helper(root->left, cnt);\n            p.first += tmp_l.first;\n            p.second += tmp_l.second;\n        }\n        if (root->right) {\n            pair tmp_r = helper(root->right, cnt);\n            p.first += tmp_r.first;\n            p.second += tmp_r.second;\n        }\n        \n        if (p.second / p.first == root->val) {\n            cnt++;\n        }\n        return p;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-nodes-equal-to-average-of-subtree","has_notes":false,"flag_type":1}